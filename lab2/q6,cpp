/*Implement a Safe Pointer class to wrap around an integer pointer.
=> Provide methods for setValue(), getValue(), and release().
=>
Demonstrate the class by storing marks of 5 students and printing them safely without
direct pointer manipulation.*/

//code
#include <iostream>
using namespace std;

class safepointer {
int* ptr;
public:
safepointer() {
        ptr = nullptr;
    }
void setValue(int value) {
        if (!ptr) {
            ptr = new int;}

        *ptr = value;}
        
int getValue() {
    if (ptr) {
    return *ptr;}
    return 0;}


void release() {
delete ptr;
ptr = nullptr;}

~safepointer() {
release();}
};

int main() {
    safepointer students[5];
    for (int i = 0; i < 5; i++) {
        int marks;
        cout << "Enter marks for student " << i + 1 << ": ";
        cin >> marks;
        students[i].setValue(marks);}

    cout << "Marks of students:" << endl;
    for (int i = 0; i < 5; i++) {
        cout << "Student " << i + 1 << ": " << students[i].getValue() << endl;}
    for (int i = 0; i < 5; i++) {
        students[i].release();
    }

    return 0;
}

